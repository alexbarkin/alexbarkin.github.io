{"version":3,"sources":["webpack:///./src/templates/blogTemplate.jsx","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["Template","markdownRemark","data","frontmatter","html","title","date","className","dangerouslySetInnerHTML","__html","to","pageQuery","m","module","exports","require","default","loader","enqueue","StaticQueryContext","React","createContext","StaticQueryDataRenderer","staticQueryData","query","render","finalData","Fragment","StaticQuery","props","children","Consumer","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json"],"mappings":"0FAAA,6HAMe,SAASA,EAAT,GAA4B,IAC/BC,EAD8B,EAARC,KACtBD,eACAE,EAAsBF,EAAtBE,YAAaC,EAASH,EAATG,KACrB,OACI,8BACI,4BAAKD,EAAYE,OACb,4BAAKF,EAAYG,MACjB,yBACAC,UAAU,oBACVC,wBAAyB,CAAEC,OAAQL,KAEvC,kBAAC,IAAD,CAAMM,GAAG,KAAT,qBAKL,IAAMC,EAAS,c,oBCtBtB,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,G,iCCA/C,uHAcyBK,QAAOC,QAdhC,IAgBMC,EAAqBC,IAAMC,cAAc,IAE/C,SAASC,EAAT,GAA4E,IAAzCC,EAAwC,EAAxCA,gBAAiBrB,EAAuB,EAAvBA,KAAMsB,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,OACzDC,EAAYxB,EACdA,EAAKA,KACLqB,EAAgBC,IAAUD,EAAgBC,GAAOtB,KAErD,OACE,kBAAC,IAAMyB,SAAP,KACGD,GAAaD,EAAOC,IACnBA,GAAa,uDAKrB,IAAME,EAAc,SAAAC,GAAU,IACpB3B,EAAkC2B,EAAlC3B,KAAMsB,EAA4BK,EAA5BL,MAAOC,EAAqBI,EAArBJ,OAAQK,EAAaD,EAAbC,SAE7B,OACE,kBAACX,EAAmBY,SAApB,MACG,SAAAR,GAAe,OACd,kBAACD,EAAD,CACEpB,KAAMA,EACNsB,MAAOA,EACPC,OAAQA,GAAUK,EAClBP,gBAAiBA,S,0ECnBZS,UAjBU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAKA,EAGEd,IAAMe,cAAcC,IAApB,eACLH,WACAC,iBACGA,EAAcG,OALV","file":"component---src-templates-blog-template-jsx-d4850b0f2b85ad467276.js","sourcesContent":["import React from 'react'\n\nimport { Link, graphql } from 'gatsby'\n\nimport '../styles/app.css';\n\nexport default function Template({data,}) {\n    const { markdownRemark } = data // data.markdownRemark holds your post data\n    const { frontmatter, html } = markdownRemark\n    return(\n        <body>\n            <h1>{frontmatter.title}</h1>\n                <h2>{frontmatter.date}</h2>\n                <div\n                className=\"blog-post-content\"\n                dangerouslySetInnerHTML={{ __html: html }}\n                />\n            <Link to='/'>Go to home page.</Link>\n        </body>\n    )\n}\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        path\n        title\n      }\n    }\n  }\n`","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}